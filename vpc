INSTALL TERRAFORM
 
sudo yum install -y yum-utils shadow-utils
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
sudo yum -y install terraform
 
export AWS_ACCESS_KEY_ID="anaccesskey"
export AWS_SECRET_ACCESS_KEY="asecretkey"
export AWS_REGION="us-east-1"
 
mkdir / vpc
cd /vpc
vim virtual.tf
**************************************************************************************
 
 
 
 
resource "aws_vpc" "prod-vpc" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"
 
  tags = {
    Name = "prod-vpc"
  }
}
#security group end here#internet gateway code
resource "aws_internet_gateway" "test-igw" {
  vpc_id = aws_vpc.prod-vpc.id
 
  tags = {
    Name = "test-igw"
  }
}
# this is Subnet code
resource "aws_subnet" "public-subnet" {
  vpc_id            = aws_vpc.prod-vpc.id
  availability_zone = "us-east-1b"
  cidr_block        = "10.0.0.0/24"
 
  tags = {
    Name = "Public-subnet"
  }
}
resource "aws_subnet" "private-subnet" {
  vpc_id            = aws_vpc.prod-vpc.id
  availability_zone = "us-east-1a"
  cidr_block        = "10.0.1.0/24"
 
  tags = {
    Name = "Private-subnet"
  }
}
 
resource "aws_security_group" "test_access" {
  name        = "test_access"
  vpc_id      = aws_vpc.prod-vpc.id
  description = "allow ssh and http"
 
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
 
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
 
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
 
 
}
#Public route table code
 
resource "aws_route_table" "public-rt" {
  vpc_id = aws_vpc.prod-vpc.id
 
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.test-igw.id
  }
 
 
  tags = {
    Name = "public-rt"
 
  }
}
#route Tatable assosication code
resource "aws_route_table_association" "public-asso" {
  subnet_id      = aws_subnet.public-subnet.id
  route_table_id = aws_route_table.public-rt.id
}
##route Tatable assosication code
resource "aws_route_table_association" "private-asso" {
  subnet_id      = aws_subnet.private-subnet.id
  route_table_id = aws_route_table.private-rt.id
}
#ec2 code
resource "aws_instance" "qwerty-server" {
  ami             = "ami-00ca32bbc84273381"
  subnet_id       = aws_subnet.public-subnet.id
  instance_type   = "t2.micro"
  security_groups = ["${aws_security_group.test_access.id}"]
  key_name        = "reema_key"
  tags = {
    Name     = "test-World"
    Stage    = "testing"
    Location = "chennai"
  }
 
}
##create an EIP for EC2
resource "aws_eip" "qwerty-ec2-eip" {
  instance = aws_instance.qwerty-server.id
}
###this is database ec2 code
resource "aws_instance" "database-server" {
  ami             = "ami-00ca32bbc84273381"
  subnet_id       = aws_subnet.private-subnet.id
  instance_type   = "t2.micro"
  security_groups = ["${aws_security_group.test_access.id}"]
  key_name        = "reema_key"
  tags = {
    Name     = "db-World"
    Stage    = "stage-base"
    Location = "delhi"
  }
 
}
##create a public ip for Nat gateway
resource "aws_eip" "nat-eip" {
}
### create Nat gateway
resource "aws_nat_gateway" "my-ngw" {
  allocation_id = aws_eip.nat-eip.id
  subnet_id     = aws_subnet.public-subnet.id
}
#create private route table
resource "aws_route_table" "private-rt" {
  vpc_id = aws_vpc.prod-vpc.id
 
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_nat_gateway.my-ngw.id
  }
 
 
  tags = {
    Name = "private-rt"
  }
}
******************************************************************************************************
terraform init
terraform fmt
terraform validate
terraform plan
terraform apply
